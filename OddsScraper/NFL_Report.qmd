---
title: "NFL Report"
execute:
  echo: false
  message: false
  warning: false
author: "James Brown"
date: "`r Sys.time()`"
format:
  html:
    df-print: kable
    theme: cosmo
    self-contained: true
    toc: true
    toc-depth: 3
    fig-width: 8
    fig-height: 6
    page-layout: full
editor: visual
---

**Timestamp**: `r format(Sys.time(), "%d-%m-%Y %H:%M:%S %Z")`

```{r}
# Load Libraries
library(tidyverse)
library(DT)

# Read in data
processed_odds_files <- list.files("../Data/processed_odds", full.names = TRUE)

# Read in all data
processed_odds_data <-
  map(processed_odds_files, read_rds) |> 
  set_names(basename(processed_odds_files) |> str_remove("\\.rds"))
```

::: panel-tabset
## Middles

### Passing Yards

```{r}
#| column: screen

# Get all passing yards over data
passing_yards_overs <-
  processed_odds_data$passing_yards |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing yards under data
passing_yards_unders <-
  processed_odds_data$passing_yards |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_yards <-
  passing_yards_overs |> 
  inner_join(passing_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 10) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(passing_yards) > 0) {
   datatable(
    passing_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Passing Touchdowns

```{r}
#| column: screen

# Get all passing TDs over data
passing_tds_overs <-
  processed_odds_data$passing_td_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing TDs under data
passing_tds_unders <-
  processed_odds_data$passing_td_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_tds <-
  passing_tds_overs |> 
  inner_join(passing_tds_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 20) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(passing_tds) > 0) {
  datatable(
    passing_tds,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Passing Attempts

```{r}
#| column: screen

# Get all passing attempts over data
passing_attempts_overs <-
  processed_odds_data$passing_attempts_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing attempts under data
passing_attempts_unders <-
  processed_odds_data$passing_attempts_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_attempts <-
  passing_attempts_overs |> 
  inner_join(passing_attempts_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 10) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(passing_attempts) > 0) {
  datatable(
    passing_attempts,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Interceptions

```{r}
#| column: screen
# Get all interceptions over data
interceptions_overs <-
  processed_odds_data$interceptions_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all interceptions under data
interceptions_unders <-
  processed_odds_data$interceptions_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
interceptions <-
  interceptions_overs |> 
  inner_join(interceptions_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 10) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(interceptions) > 0) {
  datatable(
    interceptions,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Rushing Yards

```{r}
#| column: screen
# Get all rushing yards over data
rushing_yards_overs <-
  processed_odds_data$rushing_yards_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all rushing yards under data
rushing_yards_unders <-
  processed_odds_data$rushing_yards_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
rushing_yards <-
  rushing_yards_overs |> 
  inner_join(rushing_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 10) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(rushing_yards) > 0) {
  datatable(
    rushing_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Rushing Attempts

```{r}
#| column: screen
# Get all rushing attempts over data
rushing_attempts_overs <-
  processed_odds_data$rushing_attempts |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all rushing attempts under data
rushing_attempts_unders <-
  processed_odds_data$rushing_attempts |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
rushing_attempts <-
  rushing_attempts_overs |> 
  inner_join(rushing_attempts_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 20) |>
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(rushing_attempts) > 0) {
  datatable(
    rushing_attempts,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Receiving Yards

```{r}
#| column: screen
# Get all receiving yards over data
receiving_yards_overs <-
  processed_odds_data$receiving_yards_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all receiving yards under data
receiving_yards_unders <-
  processed_odds_data$receiving_yards_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
receiving_yards <-
  receiving_yards_overs |> 
  inner_join(receiving_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 10) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(receiving_yards) > 0) {
  datatable(
    receiving_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

### Receptions

```{r}
#| column: screen
# Get all receptions over data
receptions_overs <-
  processed_odds_data$receptions_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all receptions under data
receptions_unders <-
  processed_odds_data$receptions_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
receptions <-
  receptions_overs |> 
  inner_join(receptions_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line > over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 20) |> 
  mutate(diff = under_line - over_line) |> 
  arrange(desc(diff), margin)

if (nrow(receptions) > 0) {
  datatable(
    receptions,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No middles found")
}
```

## Arbs


### Touchdowns

```{r}
#| column: screen
# Get all touchdowns over data
touchdowns_overs <-
  processed_odds_data$player_touchdowns_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all touchdowns under data
touchdowns_unders <-
  processed_odds_data$player_touchdowns_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
touchdowns <-
  touchdowns_overs |> 
  inner_join(touchdowns_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(touchdowns) > 0) {
  datatable(
    touchdowns,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}

```

### Passing Yards

```{r}
#| column: screen
# Get all passing yards over data
passing_yards_overs <-
  processed_odds_data$passing_yards |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing yards under data
passing_yards_unders <-
  processed_odds_data$passing_yards |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_yards <-
  passing_yards_overs |> 
  inner_join(passing_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(passing_yards) > 0) {
  datatable(
    passing_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Passing Touchdowns

```{r}
#| column: screen
# Get all passing TDs over data
passing_tds_overs <-
  processed_odds_data$passing_td_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing TDs under data
passing_tds_unders <-
  processed_odds_data$passing_td_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_tds <-
  passing_tds_overs |> 
  inner_join(passing_tds_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(passing_tds) > 0) {
  datatable(
    passing_tds,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Passing Attempts

```{r}
#| column: screen
# Get all passing attempts over data
passing_attempts_overs <-
  processed_odds_data$passing_attempts_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all passing attempts under data
passing_attempts_unders <-
  processed_odds_data$passing_attempts_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
passing_attempts <-
  passing_attempts_overs |> 
  inner_join(passing_attempts_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(passing_attempts) > 0) {
  datatable(
    passing_attempts,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Interceptions

```{r}
#| column: screen
# Get all interceptions over data
interceptions_overs <-
  processed_odds_data$interceptions_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all interceptions under data
interceptions_unders <-
  processed_odds_data$interceptions_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
interceptions <-
  interceptions_overs |> 
  inner_join(interceptions_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(interceptions) > 0) {
  datatable(
    interceptions,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Rushing Yards

```{r}
#| column: screen
# Get all rushing yards over data
rushing_yards_overs <-
  processed_odds_data$rushing_yards_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all rushing yards under data
rushing_yards_unders <-
  processed_odds_data$rushing_yards_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
rushing_yards <-
  rushing_yards_overs |> 
  inner_join(rushing_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(rushing_yards) > 0) {
  datatable(
    rushing_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Rushing Attempts

```{r}
#| column: screen
# Get all rushing attempts over data
rushing_attempts_overs <-
  processed_odds_data$rushing_attempts |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all rushing attempts under data
rushing_attempts_unders <-
  processed_odds_data$rushing_attempts |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
rushing_attempts <-
  rushing_attempts_overs |> 
  inner_join(rushing_attempts_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(rushing_attempts) > 0) {
  datatable(
    rushing_attempts,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Receiving Yards

```{r}
#| column: screen
# Get all receiving yards over data
receiving_yards_overs <-
  processed_odds_data$receiving_yards_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all receiving yards under data
receiving_yards_unders <-
  processed_odds_data$receiving_yards_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
receiving_yards <-
  receiving_yards_overs |> 
  inner_join(receiving_yards_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(receiving_yards) > 0) {
  datatable(
    receiving_yards,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

### Receptions

```{r}
#| column: screen
# Get all receptions over data
receptions_overs <-
  processed_odds_data$receptions_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# Get all receptions under data
receptions_unders <-
  processed_odds_data$receptions_data |>
  filter(!is.na(under_price)) |> 
  mutate(opposition_team = NA) |>
  select(-over_price, -player_team, -opposition_team) |>
  rename(under_agency = agency, under_line = line)

# Combine
receptions <-
  receptions_overs |> 
  inner_join(receptions_unders, relationship = "many-to-many") |> 
  select(match, player_name, market, contains("over"), contains("under")) |> 
  filter(over_agency != under_agency) |>
  filter(under_line == over_line) |> 
  mutate(margin = 100*((1 / over_price + 1 / under_price) - 1)) |> 
  mutate(margin = round(margin, 2)) |>
  filter(margin <= 0) |> 
  arrange(margin)

if (nrow(receptions) > 0) {
  datatable(
    receptions,
    filter = 'top',
    rownames = FALSE,
    options = list(
      pageLength = 10,
      autoWidth = FALSE,
      columnDefs = list(list(width = '100px', targets = "_all"))
    )
  )
} else {
  cat("No arbitrage opportunities found")
}
```

## Outliers

### Passing Yards

```{r}
#| column: screen
# Get all passing yards over data
passing_yards_overs <-
  processed_odds_data$passing_yards |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line)

# For each player and line combo, get the mean implied probability
passing_yards_overs_mean_probs <-
  passing_yards_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Passing Touchdowns

```{r}
#| column: screen
# Get all passing touchdowns over data
passing_touchdowns_overs <-
  processed_odds_data$passing_td_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |> 
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |> 
  ungroup()

# For each player and line combo, get the mean implied probability
passing_touchdowns_overs_mean_probs <-
  passing_touchdowns_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Passing Attempts

```{r}
#| column: screen
# Get all passing attempts over data
passing_attempts_overs <-
  processed_odds_data$passing_attempts_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
passing_attempts_overs_mean_probs <-
  passing_attempts_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Interceptions

```{r}
#| column: screen
# Get all interceptions over data
interceptions_overs <-
  processed_odds_data$interceptions_data |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
interceptions_overs_mean_probs <-
  interceptions_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 2) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Rushing Yards

```{r}
#| column: screen
# Get all rushing yards over data
rushing_yards_overs <-
  processed_odds_data$rushing_yards |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
rushing_yards_overs_mean_probs <-
  rushing_yards_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Rushing Attempts

```{r}
#| column: screen
# Get all rushing attempts over data
rushing_attempts_overs <-
  processed_odds_data$rushing_attempts |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
rushing_attempts_overs_mean_probs <-
  rushing_attempts_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Receiving Yards

```{r}
#| column: screen
# Get all receiving yards over data
receiving_yards_overs <-
  processed_odds_data$receiving_yards |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
receiving_yards_overs_mean_probs <-
  receiving_yards_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```

### Receptions

```{r}
#| column: screen
# Get all receptions over data
receptions_overs <-
  processed_odds_data$receptions |>
  mutate(opposition_team = NA) |> 
  select(-under_price, -player_team, -opposition_team) |>
  rename(over_agency = agency, over_line = line) |> 
  arrange(match, player_name, over_line, over_price) |>
  group_by(match, player_name, over_line, over_agency) |>
  slice_head(n = 1) |>
  ungroup()

# For each player and line combo, get the mean implied probability
receptions_overs_mean_probs <-
  receptions_overs |> 
  mutate(implied_prob_over = 1/over_price) |> 
  group_by(match, player_name, over_line) |>
  filter(n() >= 3) |> 
  mutate(mean_prob = mean(1 / over_price)) |> 
  mutate(diff_from_mean = 100*(mean_prob - implied_prob_over)) |> 
  arrange(desc(diff_from_mean)) |> 
  slice_head(n = 1) |> 
  ungroup() |> 
  arrange(desc(diff_from_mean))
```
:::
